# Nom du WorkFlow : valeur modifiable
name: Symfony 5 Tests

# Handler Evenement(s) : valeur modifiable
on:
  push:
    branches:
      - main
      - master
  pull_request:

# Groups des traveaux
jobs:

  # Nom du traivail
  symfony-tests:

    # Definir le nom du travail
    name: Symfony 5.0 (PHP ${{ matrix.php-versions }})

    # Runner : un serveur qui execute vos workflows (ubuntu/windows/macos)
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.4']

    steps:
      # Step 1 : checkout vers ma branche
      # https://github.com/actions/checkout (official)
      - name: Checkout vers ma branche actuelle
        uses: actions/checkout@v3

      # Step 2 : configuration de l'extension PHP
      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@verbose
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      # Step 3 : Mise en cache des dépendances pour accélérer les workflows
      # PHP - Composer - cache
      # https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
      # https://github.com/cypress-io/github-actions-cache/blob/master/examples.md
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Step 4 : Installation dependance composer
      - name: Composer install dependaces
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader

      # Step 5 : Symfony : Checker la vulnerabilité des dependances installés
      # https://github.com/sensiolabs/security-checker
      - name: Security check installed dependencies
        uses: symfonycorp/security-checker-action@v3

      # - name: Cache node_modules
      #   uses: actions/cache@v1
      #   id: yarn-cache-node-modules
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-cache-node-modules-

      # - name: Yarn install
      #   if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      #   run: yarn install

      # - name: Yarn build
      #   run: yarn run encore production

      # - name: Archive production artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: build
      #     path: public/build

      # Step 6 : Symfony test console
      - name: Check the Symfony console
        run: |
          php bin/console -V
          php bin/console about

      # Step 7 : BD
      - name: Create BD & table
        run: |
          php bin/console d:d:c --env=test
          php bin/console d:s:u --force --env=test

      # Step 8 : Symfony Tests
      - name: Run unit and functional tests
        run: |
          php bin/phpunit --stop-on-failure

      # - name: Run Behat/Mink tests
      #  run: |
      #    php vendor/bin/behat